Index: src/main/java/org/example/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n// in Development... =)\r\npublic class User implements Observer {\r\n    private String username;\r\n    private String password;\r\n    private String phoneNumber;\r\n    private String role;\r\n\r\n    private String email;\r\n    private String job;\r\n    private String address;\r\n\r\n\r\n\r\n    private User(Builder builder) {\r\n        this.username = builder.username;\r\n        this.password = builder.password;\r\n        this.phoneNumber = builder.phoneNumber;\r\n        this.role = builder.role;\r\n        this.email = builder.email;\r\n        this.job = builder.job;\r\n        this.address = builder.address;\r\n\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public String getRole() {\r\n        return role;\r\n    }\r\n\r\n    public String getPhoneNumber() {\r\n        return phoneNumber;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    public String getJob() {\r\n        return job;\r\n    }\r\n\r\n    public String getAddress() {\r\n        return address;\r\n    }\r\n\r\n    public String toFile() {\r\n        return username + \",\" + password + \",\" + phoneNumber + \",\" + role;\r\n    }\r\n\r\n    @Override\r\n    public void update(String message) {\r\n        System.out.println(\"Notification for \" + username + \": \" + message);\r\n    }\r\n\r\n\r\n    public static class Builder {\r\n        private String username;\r\n        private String password;\r\n        private String phoneNumber;\r\n        private String role;\r\n\r\n        private String email;\r\n        private String job;\r\n        private String address;\r\n\r\n\r\n        public Builder setUsername(String username) {\r\n            if(username == null )\r\n                throw new IllegalArgumentException(\" A username is required !\");\r\n            this.username = username;\r\n            return this;\r\n        }\r\n\r\n        public Builder setPassword(String password) {\r\n            if(password == null )\r\n                throw new IllegalArgumentException(\" A password is required !\");\r\n            this.password = password;\r\n            return this;\r\n        }\r\n\r\n        public Builder setPhoneNumber(String phoneNumber) {\r\n            if(phoneNumber == null )\r\n                throw new IllegalArgumentException(\" A phoneNumber is required !\");\r\n            this.phoneNumber = phoneNumber;\r\n            return this;\r\n        }\r\n\r\n        public Builder setRole(String role) {\r\n            if(role == null )\r\n                throw new IllegalArgumentException(\" A role is required !\");\r\n            this.role = role;\r\n            return this;\r\n        }\r\n\r\n        public Builder setEmail(String email) {\r\n            this.email = email;\r\n            return this;\r\n        }\r\n\r\n        public Builder setJob(String job) {\r\n            this.job = job;\r\n            return this;\r\n        }\r\n\r\n        public Builder setAddress(String address) {\r\n            this.address = address;\r\n            return this;\r\n        }\r\n\r\n        public User build() {\r\n            return new User(this);\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/User.java b/src/main/java/org/example/User.java
--- a/src/main/java/org/example/User.java	(revision 3556ffd6c59c027bb975d63e2cca31cb60a4f48a)
+++ b/src/main/java/org/example/User.java	(date 1733082188583)
@@ -4,23 +4,19 @@
     private String username;
     private String password;
     private String phoneNumber;
-    private String role;
+
 
     private String email;
-    private String job;
+
     private String address;
 
 
-
-    private User(Builder builder) {
-        this.username = builder.username;
-        this.password = builder.password;
-        this.phoneNumber = builder.phoneNumber;
-        this.role = builder.role;
-        this.email = builder.email;
-        this.job = builder.job;
-        this.address = builder.address;
-
+    public User(String username, String password, String phoneNumber, String email, String address) {
+        this.username = username;
+        this.password = password;
+        this.phoneNumber = phoneNumber;
+        this.email = email;
+        this.address = address;
     }
 
     public String getUsername() {
@@ -31,9 +27,6 @@
         return password;
     }
 
-    public String getRole() {
-        return role;
-    }
 
     public String getPhoneNumber() {
         return phoneNumber;
@@ -43,81 +36,80 @@
         return email;
     }
 
-    public String getJob() {
-        return job;
-    }
 
     public String getAddress() {
         return address;
     }
 
     public String toFile() {
-        return username + "," + password + "," + phoneNumber + "," + role;
+        return username + "," + password + "," + phoneNumber + "," + email + "," + address;
     }
+
 
     @Override
     public void update(String message) {
         System.out.println("Notification for " + username + ": " + message);
     }
-
-
-    public static class Builder {
-        private String username;
-        private String password;
-        private String phoneNumber;
-        private String role;
-
-        private String email;
-        private String job;
-        private String address;
-
-
-        public Builder setUsername(String username) {
-            if(username == null )
-                throw new IllegalArgumentException(" A username is required !");
-            this.username = username;
-            return this;
-        }
+}
 
-        public Builder setPassword(String password) {
-            if(password == null )
-                throw new IllegalArgumentException(" A password is required !");
-            this.password = password;
-            return this;
-        }
 
-        public Builder setPhoneNumber(String phoneNumber) {
-            if(phoneNumber == null )
-                throw new IllegalArgumentException(" A phoneNumber is required !");
-            this.phoneNumber = phoneNumber;
-            return this;
-        }
-
-        public Builder setRole(String role) {
-            if(role == null )
-                throw new IllegalArgumentException(" A role is required !");
-            this.role = role;
-            return this;
-        }
-
-        public Builder setEmail(String email) {
-            this.email = email;
-            return this;
-        }
-
-        public Builder setJob(String job) {
-            this.job = job;
-            return this;
-        }
-
-        public Builder setAddress(String address) {
-            this.address = address;
-            return this;
-        }
-
-        public User build() {
-            return new User(this);
-        }
-    }
-}
+//    public static class Builder {
+//        private String username;
+//        private String password;
+//        private String phoneNumber;
+//        private String role;
+//
+//        private String email;
+//        private String job;
+//        private String address;
+//
+//
+//        public Builder setUsername(String username) {
+//            if(username == null )
+//                throw new IllegalArgumentException(" A username is required !");
+//            this.username = username;
+//            return this;
+//        }
+//
+//        public Builder setPassword(String password) {
+//            if(password == null )
+//                throw new IllegalArgumentException(" A password is required !");
+//            this.password = password;
+//            return this;
+//        }
+//
+//        public Builder setPhoneNumber(String phoneNumber) {
+//            if(phoneNumber == null )
+//                throw new IllegalArgumentException(" A phoneNumber is required !");
+//            this.phoneNumber = phoneNumber;
+//            return this;
+//        }
+//
+//        public Builder setRole(String role) {
+//            if(role == null )
+//                throw new IllegalArgumentException(" A role is required !");
+//            this.role = role;
+//            return this;
+//        }
+//
+//        public Builder setEmail(String email) {
+//            this.email = email;
+//            return this;
+//        }
+//
+//        public Builder setJob(String job) {
+//            this.job = job;
+//            return this;
+//        }
+//
+//        public Builder setAddress(String address) {
+//            this.address = address;
+//            return this;
+//        }
+//
+//        public User build() {
+//            return new User(this);
+//        }
+//    }
+//}
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"05e5ac24-ee8c-4f7d-9618-f8fde71d6351\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2pM5IgVbZbQ0H0uzUuDhHaf22l2\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Main.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"E:/FCIT/CPIT252/Project/Wheelzy/WheelzyINJ\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.example.Main\" />\r\n      <module name=\"WheelzyINJ\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"org.example.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"05e5ac24-ee8c-4f7d-9618-f8fde71d6351\" name=\"Changes\" comment=\"\" />\r\n      <created>1732563025653</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1732563025653</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3556ffd6c59c027bb975d63e2cca31cb60a4f48a)
+++ b/.idea/workspace.xml	(date 1733082188580)
@@ -6,6 +6,7 @@
   <component name="ChangeListManager">
     <list default="true" id="05e5ac24-ee8c-4f7d-9618-f8fde71d6351" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/User.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
Index: src/main/java/org/example/carService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\npublic class carService {\r\n\r\n    //Under create\r\n    public static void addCar() {\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/carService.java b/src/main/java/org/example/CarService.java
rename from src/main/java/org/example/carService.java
rename to src/main/java/org/example/CarService.java
--- a/src/main/java/org/example/carService.java	(revision 3556ffd6c59c027bb975d63e2cca31cb60a4f48a)
+++ b/src/main/java/org/example/CarService.java	(date 1733082188582)
@@ -1,6 +1,6 @@
 package org.example;
 
-public class carService {
+public class CarService {
 
     //Under create
     public static void addCar() {
